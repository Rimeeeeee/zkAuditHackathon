import { FflonkProcessor, Groth16Processor, ProofOfSqlProcessor, Risc0Processor, UltraPlonkProcessor, } from '../proofTypes';
import { Risc0Version } from '../enums';
export var SupportedNetwork;
(function (SupportedNetwork) {
    SupportedNetwork["Testnet"] = "wss://testnet-rpc.zkverify.io";
    SupportedNetwork["Custom"] = "custom";
    // ADD_NEW_SUPPORTED_NETWORK
})(SupportedNetwork || (SupportedNetwork = {}));
export var ProofType;
(function (ProofType) {
    ProofType["fflonk"] = "fflonk";
    ProofType["groth16"] = "groth16";
    ProofType["risc0"] = "risc0";
    ProofType["ultraplonk"] = "ultraplonk";
    ProofType["proofofsql"] = "proofofsql";
    // ADD_NEW_PROOF_TYPE
})(ProofType || (ProofType = {}));
export var Library;
(function (Library) {
    Library["snarkjs"] = "snarkjs";
    Library["gnark"] = "gnark";
})(Library || (Library = {}));
export var CurveType;
(function (CurveType) {
    CurveType["bn128"] = "bn128";
    CurveType["bn254"] = "bn254";
    CurveType["bls12381"] = "bls12381";
})(CurveType || (CurveType = {}));
export const proofConfigurations = {
    [ProofType.fflonk]: {
        pallet: 'settlementFFlonkPallet',
        processor: FflonkProcessor,
        supportedVersions: [],
        requiresLibrary: false,
        requiresCurve: false,
    },
    [ProofType.groth16]: {
        pallet: 'settlementGroth16Pallet',
        processor: Groth16Processor,
        supportedVersions: [],
        requiresLibrary: true,
        requiresCurve: true,
    },
    [ProofType.risc0]: {
        pallet: 'settlementRisc0Pallet',
        processor: Risc0Processor,
        supportedVersions: Object.keys(Risc0Version).map((key) => Risc0Version[key]),
        requiresLibrary: false,
        requiresCurve: false,
    },
    [ProofType.ultraplonk]: {
        pallet: 'settlementUltraplonkPallet',
        processor: UltraPlonkProcessor,
        supportedVersions: [],
        requiresLibrary: false,
        requiresCurve: false,
    },
    [ProofType.proofofsql]: {
        pallet: 'settlementProofOfSqlPallet',
        processor: ProofOfSqlProcessor,
        supportedVersions: [],
        requiresLibrary: false,
        requiresCurve: false,
    },
    // ADD_NEW_PROOF_TYPE
};
export const zkvTypes = {
    MerkleProof: {
        root: 'H256',
        proof: 'Vec<H256>',
        number_of_leaves: 'u32',
        leaf_index: 'u32',
        leaf: 'H256',
    },
};
export const zkvRpc = {
    poe: {
        proofPath: {
            description: 'Get the Merkle root and path of a stored proof',
            params: [
                {
                    name: 'root_id',
                    type: 'u64',
                },
                {
                    name: 'proof_hash',
                    type: 'H256',
                },
                {
                    name: 'at',
                    type: 'BlockHash',
                    isOptional: true,
                },
            ],
            type: 'MerkleProof',
        },
    },
    aggregate: {
        statementPath: {
            description: 'Get the Merkle root and path of a aggregate statement',
            params: [
                {
                    name: 'at',
                    type: 'BlockHash',
                },
                {
                    name: 'domain_id',
                    type: 'u32',
                },
                {
                    name: 'aggregation_id',
                    type: 'u64',
                },
                {
                    name: 'statement',
                    type: 'H256',
                },
            ],
            type: 'MerkleProof',
        },
    },
};
